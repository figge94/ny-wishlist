// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String // hash (bcrypt)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  emailInvites  Boolean  @default(false)
  listUpdates   Boolean  @default(false)
  purchaseMarks Boolean  @default(false)

  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")

  wishlists Wishlist[]
  reminders Reminder[]
}

model Wishlist {
  id        String   @id @default(cuid())
  name      String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  items     Item[]

  @@unique([ownerId, name])
  @@index([ownerId])
}

model Item {
  id           String   @id @default(cuid())
  title        String
  url          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  wishlist     Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId   String
  done         Boolean  @default(false)
  priceInCents Int?

  @@index([wishlistId])
  @@index([wishlistId, done])
}

model Reminder {
  id        String   @id @default(cuid())
  title     String
  dueAt     DateTime
  done      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
  @@index([userId, dueAt])
  @@index([userId, done])
}

model Friend {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
}

model FriendRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // avs√§ndare
  fromUser   User   @relation("SentRequests", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String

  // mottagare
  toUser   User   @relation("ReceivedRequests", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId String

  status String @default("pending") // "pending" | "accepted" | "declined"

  @@unique([fromUserId, toUserId]) 
}
