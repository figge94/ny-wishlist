// prisma/schema.prisma

// ===== Datasource & Generator =====
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ===== Enums =====
enum FriendRequestStatus {
  pending
  accepted
  declined
}

// ===== Auth (NextAuth) =====
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  password      String? // nullable: OAuth-användare har ingen hash
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  // Notifieringspreferenser
  emailInvites  Boolean @default(false)
  listUpdates   Boolean @default(false)
  purchaseMarks Boolean @default(false)

  // Relationer (socialt/funktionellt)
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")

  wishlists Wishlist[]
  reminders Reminder[]

  // NextAuth relationer
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

// ===== App-domäner =====
model Wishlist {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  owner User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  items Item[]

  @@unique([ownerId, name])
  @@index([ownerId])
}

model Item {
  id           String   @id @default(cuid())
  title        String
  url          String?
  priceInCents Int?
  done         Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@index([wishlistId])
  @@index([wishlistId, done])
}

model Reminder {
  id        String   @id @default(cuid())
  title     String
  dueAt     DateTime
  done      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, dueAt])
  @@index([userId, done])
}

model Friend {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
}

model FriendRequest {
  id        String              @id @default(cuid())
  createdAt DateTime            @default(now())
  status    FriendRequestStatus @default(pending)

  // Avsändare
  fromUserId String
  fromUser   User   @relation("SentRequests", fields: [fromUserId], references: [id], onDelete: Cascade)

  // Mottagare
  toUserId String
  toUser   User   @relation("ReceivedRequests", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
  @@index([fromUserId])
  @@index([toUserId])
  @@index([status])
}
